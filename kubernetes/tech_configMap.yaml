apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
data:
  prometheus.rules: |-
    groups:
    - name: slack
      rules:
      - alert: Api de Clientes
        expr: up{instance="svc-api-clientes:5100"} == 0
        for: 1m
        labels:
          team: slack_demo
          severity: warning
        annotations:
          summary: "{{ $labels.instance }} está fora do ar."
          description: "Verifique o serviços {{ $labels.instance }} da aplicação"

      - alert: Api de Enderecos
        expr: up{instance="svc-api-enderecos:5200"} == 0
        for: 1m
        labels:
          team: slack_demo
          severity: high
        annotations:
          summary: "{{ $labels.instance }} está fora do ar."
          description: "Verifique o serviços {{ $labels.instance }} da aplicação"

      - alert: Api de Catálogo
        expr: up{instance="svc-api-catalogo:5300"} == 0
        for: 1m
        labels:
          team: slack_demo
          severity: high
        annotations:
          summary: "{{ $labels.instance }} está fora do ar."
          description: "Verifique o serviços {{ $labels.instance }} da aplicação"

      - alert: Api de Inventário
        expr: up{instance="svc-api-inventario:5400"} == 0
        for: 1m
        labels:
          team: slack_demo
          severity: high
        annotations:
          summary: "{{ $labels.instance }} está fora do ar."
          description: "Verifique o serviços {{ $labels.instance }} da aplicação"
            
      - alert: HostOutOfMemory
        expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 10
        for: 10m
        labels:
          team: slack_demo
          severity: warning
        annotations:
          summary: "O node {{ $labels.instance }} está ficando sem memória "
          description: "A memória do node está muito alta.\n  Valor = {{ $value }}\n  Labels = {{ $labels }}"

      - alert: HostHighCpuLoad
        expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
        for: 1m
        labels:
          team: slack_demo
          severity: warning
        annotations:
          summary: Alta carga de CPU (instance {{ $labels.instance }})
          description: "A carga da CPU do Node é > 80%.\n  Valor = {{ $value }}\n  Labels = {{ $labels }}"

      - alert: KubernetesPodNotHealthy
        expr: min_over_time(sum by (namespace, pod) (kube_pod_status_phase{phase=~"Pending|Unknown|Failed"})[5m:1m]) > 0
        for: 1m
        labels:
          team: slack_demo
          severity: critical
        annotations:
          summary: "Pod do kubernetes não está saudável {{ $labels.instance }}"
          description: "O pod está em um estado não saudável por mais de 10 minutos.\n  Valor = {{ $value }}\n  Labels = {{ $labels }}"

      - alert: KubernetesNodeReady
        expr: kube_node_status_condition{condition="Ready",status="true"} == 0
        for: 10m
        labels:
          team: slack_demo
          severity: critical
        annotations:
          summary: "Node com falha. (instance {{ $labels.instance }})"
          description: "O Node {{ $labels.node }} não está preparado há muito tempo.\n  Valor = {{ $value }}\n  Labels = {{ $labels }}"

      - alert: KubernetesDeploymentGenerationMismatch
        expr: kube_deployment_status_observed_generation != kube_deployment_metadata_generation
        for: 5m
        labels:
          team: slack_demo
          severity: critical
        annotations:
          summary: "Existe um deployment falho. (instance {{ $labels.instance }})"
          description: "Um deployment falhou, mas não foi revertida.\n  Valor = {{ $value }}\n  Labels = {{ $labels }}"

  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s

    rule_files:
      - /etc/prometheus/prometheus.rules
      
    alerting:
      alertmanagers:
      - scheme: http
        static_configs:
        - targets: ['alertmanager:9093']
          
    scrape_configs:
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          regex: 'node-exporter'
          action: keep
      
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https
      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics     
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
      
      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']

      - job_name: 'api_clientes'
        static_configs:
          - targets: ['svc-api-clientes:5100']

      - job_name: 'api_enderecos'
        static_configs:
          - targets: ['svc-api-enderecos:5200']

      - job_name: 'api_catalogo'
        static_configs:
          - targets: ['svc-api-catalogo:5300']

      - job_name: 'api_inventario'
        static_configs:
          - targets: ['svc-api-inventario:5400']

      - job_name: 'kubernetes-cadvisor'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name
---

#Configmap clientes
apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap-clientes
data:
  MYSQL_DATABASE_USER: "admin"
  MYSQL_DATABASE_PASSWORD: "12345678"
  MYSQL_DATABASE_DB: "api_clientes"
  MYSQL_DATABASE_HOST: "dlbanco.cxycaymkd24m.us-east-1.rds.amazonaws.com"
---

#Configmap enderecos
apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap-enderecos
data:
  MYSQL_DATABASE_USER: "admin"
  MYSQL_DATABASE_PASSWORD: "12345678"
  MYSQL_DATABASE_DB: "api_clientes"
  MYSQL_DATABASE_HOST: "dlbanco.cxycaymkd24m.us-east-1.rds.amazonaws.com"
---

#Configmap catalogo
apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap-catalogo
data:
  MYSQL_DATABASE_USER: "admin"
  MYSQL_DATABASE_PASSWORD: "12345678"
  MYSQL_DATABASE_DB: "api_produtos"
  MYSQL_DATABASE_HOST: "dlbanco.cxycaymkd24m.us-east-1.rds.amazonaws.com"
---

#Configmap inventario
apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap-inventario
data:
  MYSQL_DATABASE_USER: "admin"
  MYSQL_DATABASE_PASSWORD: "12345678"
  MYSQL_DATABASE_DB: "api_inventario"
  MYSQL_DATABASE_HOST: "dlbanco.cxycaymkd24m.us-east-1.rds.amazonaws.com"
  
  ENDPOINT_CLIENTES: "www.db.tech-talent.cf"
  ENDPOINT_CATALOGO: "www.db.tech-talent.cf"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
data:
  prometheus.yaml: |-
    {
        "apiVersion": 1,
        "datasources": [
            {
               "access":"proxy",
                "editable": true,
                "name": "Prometheus",
                "orgId": 1,
                "type": "prometheus",
                "url": "http://prometheus-service:8080",
                "version": 1
            }
        ]
    }

  loki.yaml: |-
    {
        "apiVersion": 1,
        "datasources": [
            {
               "access":"proxy",
                "editable": true,
                "name": "Loki",
                "orgId": 1,
                "type": "loki",
                "url": "http://loki:3100",
                "version": 1
            }
        ]
    }